#  Basic block
##############

snippet giv "Given bloc" b
Given ${1:filetype} ${2:(${3:comment})}:
	${4:input text}
endsnippet

snippet do "Do block" b
Do ${1:(${2:comment})}:
	${3:keystrokes}
endsnippet

snippet exe "Execute block" b
Execute ${1:ruby/python/perl/lua} ${2:(${3:comment})}:
	${4:vimscript}
endsnippet

snippet then "Then block" b
Then ${1:(${2:comment})}:
	${3:vimscript}
endsnippet

snippet exp "Expect bloc" b
Expect ${1:filetype} ${2:(${3:comment})}:
	${4:Expected output}
endsnippet

snippet bef "Before bloc" b
Before ${1:(${2:comment})}:
	${3:vim script}
endsnippet

snippet aft "After bloc" b
After ${1:(${2:comment})}:
	${3:vim script}
endsnippet

snippet inc "Include macro" b
Include: ${1:file}.vader
endsnippet

# Inline commands
#################

snippet as "Assert" b
Assert ${1:bool}${2:, ${3:message}}
endsnippet

snippet ase "AssertEqual" b
AssertEqual ${1:expected}, ${2:got}${3:, ${4:message}}
endsnippet

snippet asne "AssertNotEqual" b
AssertNotEqual ${1:expected}, ${2:got}${3:, ${4:message}}
endsnippet

snippet ast "AssertThrows" b
AssertThrows ${1:expression}
endsnippet

snippet log "Log" b
Log ${1:message}
endsnippet

snippet save "Save" b
Save ${1:name}${2:, ${3:...}}
endsnippet

snippet rest "Restore" b
Restore ${1:${2:name}${3:, ${4:...}}}
endsnippet

# Syntax helpers
################

snippet syna "SyntaxAt function" b
SyntaxAt(${1:${2:col/}${3:${4:lnum}, ${5:col}}})
endsnippet

snippet syno "SyntaxOf function" b
SyntaxOf(${1:pattern}${2:, ${3:nth=1}})
endsnippet
